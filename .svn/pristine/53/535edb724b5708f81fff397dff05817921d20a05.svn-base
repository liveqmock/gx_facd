package com.wangzhixuan.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.HtmlUtils;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.wangzhixuan.commons.base.BaseController;
import com.wangzhixuan.commons.result.PageInfo;
import com.wangzhixuan.model.BorderKnowledge;
import com.wangzhixuan.model.KnowledgeType;
import com.wangzhixuan.service.IBorderKnowledgeService;
import com.wangzhixuan.service.IKnowledgeTypeService;

/**
 * <p>
 * 边防知识表  前端控制器
 * </p>
 * @author sunbq
 * @since 2017-08-22
 */
@Controller
@RequestMapping("/borderKnowledge")
public class BorderKnowledgeController extends BaseController {
	
	@Autowired private IBorderKnowledgeService borderKnowledgeService;
	
	
	@Autowired private IKnowledgeTypeService knowledgeTypeService;
	
	@GetMapping("/manager")
	public String manager() {
		return "admin/borderKnowledge/borderKnowledgeList";
	}


	@PostMapping("/dataGrid")
	@ResponseBody
	public PageInfo dataGrid(BorderKnowledge borderKnowledge, Integer page, Integer rows, String sort,String order,HttpServletRequest req) {
		
		PageInfo pageInfo = new PageInfo(page, rows, sort, order);
		
		String name = req.getParameter("name");
		String title = req.getParameter("title");
		String content = req.getParameter("content");
		String createUser = req.getParameter("createUser");
		String recvDateStart = req.getParameter("recvDateStart");
		String recvDateEnd = req.getParameter("recvDateEnd");
		
		SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy-MM-dd HH:mm:ss" );
		
		
        Map<String, Object> condition = new HashMap<String, Object>();

        //发送者的姓名
        if (null != name && !name.equals("")) {
            condition.put("bname", name);
        }
        if (null != title && !title.equals("")) {	//标题
            condition.put("title", title);
        }
        //开始时间
        if (null != recvDateStart && !recvDateStart.equals("")) {
            try {
				condition.put("recvDateStart", sdf.parseObject(recvDateStart));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
        //结束时间
        if (null != recvDateEnd && !recvDateEnd.equals("")) {
            try {
				condition.put("recvDateEnd", sdf.parseObject(recvDateEnd));
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
        //报送内容
        if ( null != content && !content.equals("") ){
        	condition.put("content", content);
        }
        //报送的类型
        if (null != createUser && !createUser.equals("") ){
        	condition.put("createUser", createUser);
        }
      
       
        borderKnowledgeService.selectDataGrid(pageInfo);
        
		return pageInfo;
	}
	
	/**
	 * 添加页面
	 * @return
	 */
	@GetMapping("/addPage")
	public String addPage() {
		return "admin/borderKnowledge/borderKnowledgeAdd";
	}

	/**
	 * 添加
	 * @param 
	 * @return
	 */
	@PostMapping("/add")
	@ResponseBody
	public Object add(@Valid BorderKnowledge borderKnowledge,KnowledgeType knowledgeType, BindingResult result,HttpServletRequest req) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		knowledgeType.setStatus(1);
		boolean a = knowledgeTypeService.insert(knowledgeType);
		if (a==false) {
			return renderError("添加失败！");
		}
		
		
		Wrapper<KnowledgeType> ew = new EntityWrapper<KnowledgeType>();
		ew.eq("name", knowledgeType.getName());
		KnowledgeType k =knowledgeTypeService.selectOne(ew);
		if(k==null||"".equals(k)){
			return renderError("添加失败！");
		}
		
		long i = this.getUserId();
		int j = (int) i;
		borderKnowledge.setCreateUser(j);
		borderKnowledge.setStatus(1);
		borderKnowledge.setCreateTime(new Date());
		borderKnowledge.setTypeId(k.getId());
		borderKnowledge.setContent(req.getParameter("content"));
		
		boolean b = borderKnowledgeService.insert(borderKnowledge);
		if (b) {
			return renderSuccess("添加成功！");
		} else {
			return renderError("添加失败！");
		}
	}

	/**
	 * 删除
	 * @param id
	 * @return
	 */
	@PostMapping("/delete")
	@ResponseBody
	public Object delete(int id) {
		BorderKnowledge borderKnowledge =borderKnowledgeService.selectById(id);
		borderKnowledge.setStatus(0);
		boolean b = borderKnowledgeService.updateById(borderKnowledge);
		if (b) {
			return renderSuccess("删除成功！");
		} else {
			return renderError("删除失败！");
		}
	}

	/**
	 * 编辑
	 * @param model
	 * @param id
	 * @return
	 */
	@GetMapping("/editPage")
	public String editPage(Model model, Long id) {
		BorderKnowledge borderKnowledge = borderKnowledgeService.selectById(id);
		KnowledgeType knowledgeType= knowledgeTypeService.selectById(borderKnowledge.getTypeId());
		model.addAttribute("b", borderKnowledge);
		model.addAttribute("k", knowledgeType);
		return "admin/borderKnowledge/borderKnowledgeEdit";
	}

	/**
	 * 编辑
	 * @param 
	 * @return
	 */
	@PostMapping("/edit")
	@ResponseBody
	public Object edit(@Valid BorderKnowledge borderKnowledge,KnowledgeType knowledgeType, BindingResult result,int kid) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		BorderKnowledge bk = borderKnowledgeService.selectById(borderKnowledge.getId());
		bk.setContent(HtmlUtils.htmlUnescape(borderKnowledge.getContent()));
		bk.setTitle(borderKnowledge.getTitle());
		boolean b = borderKnowledgeService.updateById(bk);
		
		KnowledgeType kType =  knowledgeTypeService.selectById(kid);
		kType.setName(knowledgeType.getName());
		boolean a = knowledgeTypeService.updateById(kType);
		if (b && a ) {
			return renderSuccess("编辑成功！");
		} else {
			return renderError("编辑失败！");
		}
	}
	
	/**
	 * 发布边防知识
	 * @param borderKnowledge
	 * @param knowledgeType
	 * @param result
	 * @return
	 */
	@PostMapping("/check")
	@ResponseBody
	public Object check(@Valid BorderKnowledge borderKnowledge,KnowledgeType knowledgeType, BindingResult result,int id) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		BorderKnowledge bk = borderKnowledgeService.selectById(borderKnowledge.getId());
		bk.setStatus(2);
		boolean b = borderKnowledgeService.updateById(bk);
//		
//		KnowledgeType kType = knowledgeTypeService.selectById(bk.getTypeId());
//		kType.setStatus(2);
//		boolean a = knowledgeTypeService.updateById(kType);
		if (b  ) {
			return renderSuccess("发布成功！");
		} else {
			return renderError("发布失败！");
		}
	}
	
	@GetMapping("/see")
	public Object see( Long id ,Model model) {
		BorderKnowledge borderKnowledge = borderKnowledgeService.selectById(id);
		borderKnowledge.setContent(HtmlUtils.htmlUnescape(borderKnowledge.getContent()));
		KnowledgeType knowledgeType = knowledgeTypeService.selectById(borderKnowledge.getTypeId());
		model.addAttribute("b", borderKnowledge);
		model.addAttribute("k", knowledgeType);
	    return "admin/borderKnowledge/borderKnowledgeSee";
	}
}
