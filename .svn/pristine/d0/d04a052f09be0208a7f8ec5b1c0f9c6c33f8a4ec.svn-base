package com.wangzhixuan.controller;



import java.util.ArrayList;
import java.util.Date;
import java.util.List;


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.HtmlUtils;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.wangzhixuan.commons.base.BaseController;
import com.wangzhixuan.commons.result.PageInfo;
import com.wangzhixuan.model.Notice;
import com.wangzhixuan.model.NoticeRead;
import com.wangzhixuan.model.Organization;
import com.wangzhixuan.model.User;
import com.wangzhixuan.service.INoticeReadService;
import com.wangzhixuan.service.INoticeService;
import com.wangzhixuan.service.IOrganizationService;
import com.wangzhixuan.service.IUserService;

/**
 * <p>
 * 公告消息  前端控制器
 * </p>
 * @author sunbq
 * @since 2017-06-14
 */
@Controller
@RequestMapping("/notice")
public class NoticeController extends BaseController {
	
	@Autowired private INoticeService noticeService;
	@Autowired private INoticeReadService nrService;
	@Autowired private IUserService UserService;
	@Autowired private IOrganizationService orgService;
	
	@GetMapping("/manager")
	public String manager() {
		return "admin/notice/noticeList";
	}


	@PostMapping("/dataGrid")
	@ResponseBody
	public PageInfo dataGrid(Notice notice, Integer page, Integer rows, String sort,String order) {
		PageInfo pageInfo = new PageInfo(page, rows, sort, order);
		try {
			EntityWrapper<Notice> ew = new EntityWrapper<Notice>();
			if (notice.getTitle()!=null&&!notice.getTitle().equals("")) {
				ew.like("title", notice.getTitle());
			}
			ew.ne("status", 0);
			ew.orderBy(pageInfo.getSort(), pageInfo.getOrder().equalsIgnoreCase("ASC"));
			Page<Notice> pages = getPage(pageInfo);
			pages = noticeService.selectPage(pages, ew);
			pageInfo.setRows(pages.getRecords());
			pageInfo.setTotal(pages.getTotal());
			this.OpLog("获取公告信息列表", 0, getUserId());
		} catch (Exception e) {
			e.printStackTrace();
			this.ErrorLog(e, 0, getUserId());
		}
		return pageInfo;
	}
	
	/**
	 * 添加页面
	 * @return
	 */
	@GetMapping("/addPage")
	public String addPage() {
		return "admin/notice/noticeAdd";
	}

	/**
	 * 添加
	 * @param 
	 * @return
	 */
	@PostMapping("/add")
	@ResponseBody
	public Object add(@Valid Notice notice, BindingResult result ,HttpServletRequest req) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		notice.setInfo(req.getParameter("info"));
		notice.setCreateTime(new Date());
		boolean b = noticeService.insert(notice);
		if (b) {
			this.OpLog("添加公告", 0, getUserId());
			return renderSuccess("添加成功！");
		} else {
			return renderError("添加失败！");
		}
	}

	/**
	 * 删除
	 * @param id
	 * @return
	 */
	@PostMapping("/delete")
	@ResponseBody
	public Object delete(Integer id) {
		Notice notice = new Notice();
		notice.setId(id);
		notice.setStatus(0);
		boolean b = noticeService.updateById(notice);
		NoticeRead nr = new NoticeRead();
		nr.setNstatus(0);
		EntityWrapper<NoticeRead> ewnr = new EntityWrapper<>();
		ewnr.eq("nid", notice.getId());
		nrService.update(nr, ewnr);
		if (b) {
			this.OpLog("删除公告", 0, getUserId());
			return renderSuccess("删除成功！");
		} else {
			return renderError("删除失败！");
		}
	}
	/**
	 * 发布
	 * @param id
	 * @return
	 */
	@PostMapping("/check")
	@ResponseBody
	public Object check(Integer id) {
		Notice notice = noticeService.selectById(id);
		notice.setStatus(2);
		String receiver = notice.getReceiver().toString();
			List<Organization> pid = orgService.selectOrganizationDePid(receiver);
			for(Object os:pid){
			if(os==null){
					List<Organization> selectListJh = orgService.selectListJh(receiver);
					for (Organization o : selectListJh) {
						String val=o.getId().toString();
					EntityWrapper<User> ew = new EntityWrapper<User>();
					ew.in("organization_id",val);
					List<User> us = UserService.selectList(ew);
					Date d =new Date(); 
					for (User u : us) {
						NoticeRead nr = new NoticeRead();
						nr.setCreateTime(d);
						nr.setNid(notice.getId());
						nr.setStatus(0);
						nr.setUid(u.getId());
						nr.insert();
								}
						List<Organization> selectListJ = orgService.selectListZl(val);
						for (Organization j : selectListJ) {
								String jd = j.getId().toString();
								EntityWrapper<User> es = new EntityWrapper<User>();
								es.in("organization_id",jd);
								List<User> bs = UserService.selectList(es);
								Date dd =new Date(); 
								for (User u : bs) {
									NoticeRead nr = new NoticeRead();
									nr.setCreateTime(dd);
									nr.setNid(notice.getId());
									nr.setStatus(0);
									nr.setUid(u.getId());
									nr.insert();
								}
						}	
					}
			}else{
				List<Organization> selectListJh = orgService.selectListJh(receiver);
				System.out.println( selectListJh);
				if(selectListJh.isEmpty()){
					List<Organization> selectListZh = orgService.selectListZh(receiver);
					String val =null;
						for (Organization o : selectListZh) {
							val=(o.getId().toString());
						}
						System.out.println(val);
						EntityWrapper<User> ew = new EntityWrapper<User>();
						ew.in("organization_id",val);
						List<User> usz = UserService.selectList(ew);
						Date dz =new Date(); 
						for (User u : usz) {
							NoticeRead nr = new NoticeRead();
							nr.setCreateTime(dz);
							nr.setNid(notice.getId());
							nr.setStatus(0);
							nr.setUid(u.getId());
							nr.insert();
									}
				}else{
				String val = null;
					List<Organization> selectListZl = orgService.selectListZl(receiver);
					for (Organization o : selectListZl) {
						val=(o.getId().toString());
					}
					EntityWrapper<User> ew = new EntityWrapper<User>();
					ew.in("organization_id",val);
					List<User> usz = UserService.selectList(ew);
					Date dz =new Date(); 
					for (User u : usz) {
						NoticeRead nr = new NoticeRead();
						nr.setCreateTime(dz);
						nr.setNid(notice.getId());
						nr.setStatus(0);
						nr.setUid(u.getId());
						nr.insert();
								}
					}
				}
			}	
		boolean b = noticeService.updateById(notice);
		if (b) {
			this.OpLog("发布公告", 0, getUserId());
			return renderSuccess("发布成功！");
		} else {
			return renderError("发布失败！");
		}
	}
	 
	/**
	 * 编辑
	 * @param model
	 * @param id
	 * @return
	 */
	@GetMapping("/editPage")
	public String editPage(Model model, Long id) {
		Notice notice = noticeService.selectById(id);
		notice.setInfo(HtmlUtils.htmlUnescape(notice.getInfo()));
		model.addAttribute("notice", notice);
		return "admin/notice/noticeEdit";
	}

	/**
	 * 编辑
	 * @param 
	 * @return
	 */
	@PostMapping("/edit")
	@ResponseBody
	public Object edit(@Valid Notice notice, BindingResult result) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		boolean b = noticeService.updateById(notice);
		if (b) {
			this.OpLog("修改公告", 0, getUserId());
			return renderSuccess("编辑成功！");
		} else {
			return renderError("编辑失败！");
		}
	}
	/**
	 * 查看
	 * @param 
	 * @return
	 */
	@GetMapping("/see")
	public Object see( Long id ,Model model) {
		Notice notice = noticeService.selectById(id);
		notice.setInfo(HtmlUtils.htmlUnescape(notice.getInfo()));
		model.addAttribute("notice", notice);
		String notices= notice.getReceiver().toString();
		 Long ids = notice.getReceiver();
		List<Organization> pid = orgService.selectOrganizationDePid(notices);
		for(Object os:pid){
			if(os==null){
				List<Organization> selectListJh = orgService.selectListJh(notices);
				if(ids==1){
				EntityWrapper<User> eo = new EntityWrapper<>();
				for (Organization o : selectListJh) {
					String val=o.getId().toString();
					eo.or("organization_id",val);
					 List<User> us= UserService.selectList(eo);
						 model.addAttribute("us",us);
					}
				}else{
					List<User> us=null;
					List<Object> user=new ArrayList<Object>();
					for (Organization as :selectListJh) {
						String va = as.getId().toString();
						List<Organization> selectListZl = orgService.selectListZl(va);
						if(selectListZl.isEmpty()){
							List<Organization> selectListZh = orgService.selectListZh(va);
							for (Organization y: selectListZh) {
								String is = y.getId().toString();
								user.add(is);
								}
							}else{
							for (Organization t: selectListZl) {
							String string = t.getId().toString();
									List<Organization>	selectListZh = orgService.selectListZh(string);
								for (Organization y: selectListZh) {
									String is = y.getId().toString();
									user.add(is);
									}				
							}
						}
					}		
					EntityWrapper<User> ew = new EntityWrapper<User>();
					ew.in("organization_id",user);
					 us = UserService.selectList(ew);
					model.addAttribute("us", us);	
				}
			}else{
				List<Organization> selectListZl = orgService.selectListZl(notices);
				if(selectListZl.isEmpty()){
					List<Organization> selectListZh = orgService.selectListZh(notices);
					for (Organization ss :selectListZh) {
					String	val=ss.getId().toString();
					EntityWrapper<User> ew = new EntityWrapper<User>();
					ew.in("organization_id",val );
					List<User> us = UserService.selectList(ew);
					model.addAttribute("us", us);
					}
				}else{
					List<User> us=null;
					List<Object> user=new ArrayList<Object>();
					for (Organization as :selectListZl) {
						String va = as.getId().toString();
						user.add(va);
					}	
				EntityWrapper<User> es = new EntityWrapper<User>();
				es.in("organization_id", user);
				us=UserService.selectList(es);				
					 model.addAttribute("us", us);
					}
			}
		}
		return "admin/notice/noticesee";
	}
}
