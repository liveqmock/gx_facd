package com.wangzhixuan.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import java.util.List;
import java.util.Map;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.wangzhixuan.commons.base.BaseController;
import com.wangzhixuan.commons.result.PageInfo;
import com.wangzhixuan.model.ItemFile;
import com.wangzhixuan.model.TopicalInfo;
import com.wangzhixuan.service.IItemFileService;
import com.wangzhixuan.service.ISysConfigService;
import com.wangzhixuan.service.ITopicalInfoService;

/**
 * <p>
 * 实事信息表  前端控制器
 * </p>
 * @author sunbq
 * @since 2017-08-22
 */
@Controller
@RequestMapping("/topicalInfo")
public class TopicalInfoController extends BaseController {
	
	@Autowired
	private ITopicalInfoService topicalInfoService;
	
	@Autowired
	private IItemFileService itemFileService;
	
	@Autowired
	private ISysConfigService configService;
	
	@GetMapping("/manager")
	public String manager() {
		return "admin/topicalInfo/topicalInfoList";
	}


	@PostMapping("/dataGrid")
	@ResponseBody
	public PageInfo dataGrid(TopicalInfo topicalInfo, Integer page, Integer rows, String sort,String order,HttpServletRequest req) {
		String title=req.getParameter("title");
		String createUser=req.getParameter("createUser");
		String startDate=req.getParameter("startDate");
		String endDate=req.getParameter("endDate");
		
		Map<String,Object> condition = new HashMap<String,Object>();
		if(title!=null&&title!="") {
			condition.put("title", title);
		}
		if(createUser!=null&&createUser!="") {
			condition.put("createUser", createUser);
		}
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		if(startDate!=null&&!startDate.equals("")) {
			try {
				condition.put("startDate", sdf.parseObject(startDate));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		if(endDate!=null&&!endDate.equals("")) {
			try {
				condition.put("endDate", sdf.parseObject(endDate));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		PageInfo pageInfo = new PageInfo(page, rows, sort, order);
		
//		EntityWrapper<TopicalInfo> ew = new EntityWrapper<TopicalInfo>(topicalInfo);
//		ew.orderBy(pageInfo.getSort(), pageInfo.getOrder().equalsIgnoreCase("ASC"));
//		Page<TopicalInfo> pages = getPage(pageInfo);
//		pages = topicalInfoService.selectPage(pages, ew);
//		pageInfo.setRows(pages.getRecords());
//		pageInfo.setTotal(pages.getTotal());
		pageInfo.setCondition(condition);
		topicalInfoService.selectDataGrid(pageInfo);
		return pageInfo;
	}
	
	/**
	 * 添加页面
	 * @return
	 */
	@GetMapping("/addPage")
	public String addPage() {
		return "admin/topicalInfo/topicalInfoAdd";
	}

	/**
	 * 添加
	 * @param 
	 * @return
	 */
	@PostMapping("/add")
	@ResponseBody
	public Object add(@Valid TopicalInfo topicalInfo,@RequestParam("file") MultipartFile multipartFile, BindingResult result,HttpServletRequest req) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		String title=req.getParameter("title");
		String content=req.getParameter("info");
		topicalInfo.setCreateTime(new Date());
		topicalInfo.setCreateUser(getStaffName());
		topicalInfo.setTitle(title);
		topicalInfo.setContent(content);
		topicalInfo.setStatus(0);
		int id = topicalInfoService.insertAndGetId(topicalInfo);
		ItemFile itemFile = new ItemFile();
		if (multipartFile != null && multipartFile.getOriginalFilename() != null && multipartFile.getOriginalFilename().length() > 0) {
			String newFileName = new Date().getTime()+multipartFile.getOriginalFilename();
			// 存储图片的物理路径
			String date = new SimpleDateFormat("yyyy_MM").format(new Date());
			String pic_path = configService.selectConfig("upload_url")+"/"+date;
		//	String pic_path = req.getContextPath()+"/"+date+"/";//本地测试
//			String url =req.getRequestURL().toString().replace(req.getServletPath(), "/upload/"+date+"/");
			String url =req.getContextPath()+ "/upload/"+date+"/";
			// 如果文件夹不存在则创建
			File file = new File(pic_path);
			if (!file.exists()) {
				file.mkdirs();
			}
			// 新文件路径实例
			File targetFile = new File(pic_path, newFileName);
			// 内存数据读入磁盘
			try {
				multipartFile.transferTo(targetFile);
				itemFile.setOwnerid(id);
				itemFile.setFileurl(url +newFileName);
				itemFile.setFilename(newFileName);
				String f = newFileName.substring(newFileName.lastIndexOf(".")+1);
				itemFile.setFilesuffix(f);
				itemFile.setType(2);
				itemFileService.insert(itemFile);
			} catch (IOException e) {
				e.printStackTrace();
				return renderError("系统异常");
			}
		}

//		if () {
//			return renderSuccess("添加成功！");
//		} else {
//			return renderError("添加失败！");
//		}
		return renderSuccess();
	}
	
	/**
	 * 发布
	 * @return 
	 */
	@PostMapping("check")
	@ResponseBody
	public Object publish(@Valid TopicalInfo topicalInfo, BindingResult result,HttpServletRequest req) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		topicalInfo.setStatus(1);
		boolean b = topicalInfoService.updateById(topicalInfo);
		if (b) {
			return renderSuccess("发布成功！");
		} else {
			return renderError("发布失败！");
		}
	}

	/**
	 * 删除
	 * @param id
	 * @return
	 */
	@PostMapping("/delete")
	@ResponseBody
	public Object delete(Integer id) {
		TopicalInfo topicalInfo = new TopicalInfo();
		topicalInfo.setId(id);
		boolean b = topicalInfoService.deleteById(topicalInfo);
		if (b) {
			return renderSuccess("删除成功！");
		} else {
			return renderError("删除失败！");
		}
	}

	/**
	 * 编辑
	 * @param model
	 * @param id
	 * @return
	 */
	@GetMapping("/editPage")
	public String editPage(Model model, Long id) {
		TopicalInfo topicalInfo = topicalInfoService.selectById(id);
		model.addAttribute("topicalInfo", topicalInfo);
		return "admin/topicalInfo/topicalInfoEdit";
	}

	/**
	 * 编辑
	 * @param 
	 * @return
	 */
	@PostMapping("/edit")
	@ResponseBody
	public Object edit(@Valid TopicalInfo topicalInfo, BindingResult result,HttpServletRequest req) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		String title=req.getParameter("title");
		String content=req.getParameter("info");
		topicalInfo.setTitle(title);
		topicalInfo.setContent(content);
		System.out.println(title);
		System.out.println(content);
		boolean b = topicalInfoService.updateById(topicalInfo);
		if (b) {
			return renderSuccess("编辑成功！");
		} else {
			return renderError("编辑失败！");
		}
	}
	
	/*
	 * 查看
	 */
	@RequestMapping("detail")
	public String detail(Long id,Model model) {
		TopicalInfo topicalInfo=topicalInfoService.selectById(id);
		ItemFile itemFile=itemFileService.selectByOwnerid(topicalInfo.getId());
		System.out.println(itemFile.getFileurl());
		model.addAttribute("itemFile", itemFile);
		model.addAttribute("topicalInfo", topicalInfo);
	return "admin/topicalInfo/topicalInfoDetail";
	}
}
	
