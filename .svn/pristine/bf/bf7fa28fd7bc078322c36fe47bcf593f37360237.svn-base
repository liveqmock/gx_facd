package com.wangzhixuan.controller;

import java.util.Date;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.wangzhixuan.commons.base.BaseController;
import com.wangzhixuan.commons.result.PageInfo;
import com.wangzhixuan.model.Road;
import com.wangzhixuan.model.RoadTrail;
import com.wangzhixuan.model.User;
import com.wangzhixuan.service.IRoadService;
import com.wangzhixuan.service.IRoadTrailService;
import com.wangzhixuan.service.IUserService;

/**
 * <p>
 * 路段信息  前端控制器
 * </p>
 * 
 * @author sunbq
 * @since 2017-06-12
 */
@Controller
@RequestMapping("/road")
public class RoadController extends BaseController {

	@Autowired
	private IRoadService roadService;
	
	@Autowired
	private IRoadTrailService roadtrailService;
	
	@Autowired
	private IUserService userService;

	@GetMapping("/manager")
	public String manager() {
		return "admin/road/roadList";
	}

	@PostMapping("/dataGrid")
	@ResponseBody
	public PageInfo dataGrid(Road road, Integer page, Integer rows, String sort, String order) {
		PageInfo pageInfo = new PageInfo(page, rows, sort, order);
		try {
			EntityWrapper<Road> ew = new EntityWrapper<Road>();
			if (road.getName() != null) {
				ew.like("name", road.getName());
			}
			ew.ne("data_status", 2);
			ew.orderBy(pageInfo.getSort(), pageInfo.getOrder().equalsIgnoreCase("ASC"));
			Page<Road> pages = getPage(pageInfo);
			pages = roadService.selectPage(pages, ew);
			pageInfo.setRows(pages.getRecords());
			pageInfo.setTotal(pages.getTotal());
			this.OpLog("获取巡防路列表", 0, getUserId());
		} catch (Exception e) {
			e.printStackTrace();
			this.ErrorLog(e, 0, getUserId());
		}
		return pageInfo;
	}

	/**
	 * 添加页面
	 * 
	 * @return
	 */
	@GetMapping("/addPage")
	public String addPage() {
		return "admin/road/roadAdd";
	}

	/**
	 * 添加
	 * 
	 * @param
	 * @return
	 */
	@PostMapping("/add")
	@ResponseBody
	public Object add(@Valid Road road, BindingResult result) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		road.setCreateTime(new Date());
		boolean b = roadService.insert(road);
		if (b) {
			this.OpLog("添加巡防路", 0, getUserId());
			return renderSuccess("添加成功！");
		} else {
			return renderError("添加失败！");
		}
	}

	/**
	 * 删除
	 * 
	 * @param id
	 * @return
	 */
	@PostMapping("/delete")
	@ResponseBody
	public Object delete(Long id) {
		EntityWrapper<User> ew = new EntityWrapper<>();
		ew.eq("road", id);
		ew.eq("user_type", 1);
		List<User> ulist = userService.selectList(ew);
		if (ulist.size()>0) {
			return renderError("该路段已分配给 "+ulist.size()+" 人,进行巡防！不能删除该路段！");
		}
		Road road = new Road();
		road.setId(id);
		road.setDataStatus(2);
		boolean b = roadService.updateById(road);
		if (b) {
			this.OpLog("删除巡防路", 0, getUserId());
			return renderSuccess("删除成功！");
		} else {
			return renderError("删除失败！");
		}
	}

	/**
	 * 编辑
	 * 
	 * @param model
	 * @param id
	 * @return
	 */
	@GetMapping("/editPage")
	public String editPage(Model model, Long id) {
		Road road = roadService.selectById(id);
		model.addAttribute("road", road);
		return "admin/road/roadEdit";
	}

	/**
	 * 编辑
	 * 
	 * @param
	 * @return
	 */
	@PostMapping("/edit")
	@ResponseBody
	public Object edit(@Valid Road road, BindingResult result) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		boolean b = roadService.updateById(road);
		if (b) {
			this.OpLog("修改巡防路", 0, getUserId());
			return renderSuccess("编辑成功");
		} else {
			return renderError("编辑失败");
		}
	}
	/**
	 * 地图获取单个巡防路线
	 * @param id
	 * @return
	 */
	@RequestMapping("trails")
	@ResponseBody
	public Object trails(Long id){
		EntityWrapper<RoadTrail> ew = new EntityWrapper<>();
		ew.eq("rid", id);
		ew.orderBy("create_time", true);
		List<RoadTrail> rlist = roadtrailService.selectList(ew);
		return renderSuccess(rlist);
	}
	
	/**
     * 权限树
     *
     * @return
     */
    @PostMapping("/tree")
    @ResponseBody
    public Object tree() {
        return roadService.selectTree();
    }
    

}
