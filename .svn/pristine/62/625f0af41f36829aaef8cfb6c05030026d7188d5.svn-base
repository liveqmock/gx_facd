package com.wangzhixuan.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.wangzhixuan.commons.base.BaseController;
import com.wangzhixuan.commons.result.PageInfo;
import com.wangzhixuan.commons.utils.ExportExcel;
import com.wangzhixuan.model.MapMark;
import com.wangzhixuan.service.IMapMarkService;
import com.wangzhixuan.service.ISysConfigService;

/**
 * <p>
 * 地图标记  前端控制器
 * </p>
 * @author sunbq
 * @since 2017-06-12
 */
@Controller
@RequestMapping("/mapMark")
public class MapMarkController extends BaseController {
	
	@Autowired private IMapMarkService mapMarkService;
	
	@Autowired
	private ISysConfigService configService;
	
	@GetMapping("/manager")
	public String manager() {
		return "admin/mapMark/mapMarkList";
	}


	@PostMapping("/dataGrid")
	@ResponseBody
	public PageInfo dataGrid(MapMark mapMark, Integer page, Integer rows, String sort,String order) {
		PageInfo pageInfo = new PageInfo(page, rows, sort, order);
		try {
			EntityWrapper<MapMark> ew = new EntityWrapper<MapMark>();
			if (mapMark.getName()!=null) {
				ew.like("name", mapMark.getName());
			}
			if (mapMark.getType()!=null) {
				ew.eq("type", mapMark.getType());
			}
			ew.orderBy(pageInfo.getSort(), pageInfo.getOrder().equalsIgnoreCase("ASC"));
			Page<MapMark> pages = getPage(pageInfo);
			pages = mapMarkService.selectPage(pages, ew);
			pageInfo.setRows(pages.getRecords());
			pageInfo.setTotal(pages.getTotal());
			this.OpLog("获取标记列表", 0, getUserId());
		} catch (Exception e) {
			e.printStackTrace();
			this.ErrorLog(e, 0, getUserId());
		}
		return pageInfo;
	}
	
	/**
	 * 添加页面
	 * @return
	 */
	@GetMapping("/addPage")
	public String addPage() {
		return "admin/mapMark/mapMarkAdd";
	}

	/**
	 * 添加
	 * @param 
	 * @return
	 */
	@PostMapping("/add")
	@ResponseBody
	public Object add(@Valid MapMark mapMark, BindingResult result,@RequestParam("file") MultipartFile multipartFile,HttpServletRequest req) {
		if (result.hasErrors()) {
			return renderError(result);
		}
		if (multipartFile != null && multipartFile.getOriginalFilename() != null && multipartFile.getOriginalFilename().length() > 0) {
			String newFileName = new Date().getTime()+multipartFile.getOriginalFilename();
			// 存储图片的物理路径
			String date = new SimpleDateFormat("yyyy_MM").format(new Date());
			String pic_path = configService.selectConfig("upload_url")+"/"+date;
//			String url =req.getRequestURL().toString().replace(req.getServletPath(), "/upload/"+date+"/");
			String url =req.getContextPath()+ "/upload/"+date+"/";
			// 如果文件夹不存在则创建
			File file = new File(pic_path);
			if (!file.exists()) {
				file.mkdirs();
			}
			// 新文件路径实例
			File targetFile = new File(pic_path, newFileName);
			// 内存数据读入磁盘
			try {
				multipartFile.transferTo(targetFile);
				mapMark.setIcon(url +newFileName);
			} catch (IOException e) {
				e.printStackTrace();
				return renderError("系统异常");
			}
		}
		mapMark.setCreateTime(new Date());
		boolean b = mapMarkService.insert(mapMark);
		if (b) {
			this.OpLog("保存标记", 0, getUserId());
			return renderSuccess("添加成功！");
		} else {
			return renderError("添加失败！");
		}
	}

	/**
	 * 删除
	 * @param id
	 * @return
	 */
	@PostMapping("/delete")
	@ResponseBody
	public Object delete(Long id) {
		boolean b = mapMarkService.deleteById(id);
		if (b) {
			this.OpLog("删除标记", 0, getUserId());
			return renderSuccess("删除成功！");
		} else {
			return renderError("删除失败！");
		}
	}

	/**
	 * 编辑
	 * @param model
	 * @param id
	 * @return
	 */
	@GetMapping("/editPage")
	public String editPage(Model model, Long id) {
		MapMark mapMark = mapMarkService.selectById(id);
		model.addAttribute("mapMark", mapMark);
		return "admin/mapMark/mapMarkEdit";
	}

	/**
	 * 编辑
	 * @param 
	 * @return
	 */
	@PostMapping("/edit")
	@ResponseBody
	public Object edit(@Valid MapMark mapMark, BindingResult result,@RequestParam("file") MultipartFile multipartFile,HttpServletRequest req) {
		if (result.hasErrors()) {
			return renderError(result);
		}
	       if (multipartFile != null && multipartFile.getOriginalFilename() != null && multipartFile.getOriginalFilename().length() > 0) {
				String newFileName = new Date().getTime()+multipartFile.getOriginalFilename();
				// 存储图片的物理路径
				String date = new SimpleDateFormat("yyyy_MM").format(new Date());
				String pic_path = configService.selectConfig("upload_url")+"/"+date;
//				String url =req.getRequestURL().toString().replace(req.getServletPath(), "/upload/"+date+"/");
				String url =req.getContextPath()+ "/upload/"+date+"/";
				// 如果文件夹不存在则创建
				File file = new File(pic_path);
				if (!file.exists()) {
					file.mkdirs();
				}
				// 新文件路径实例
				File targetFile = new File(pic_path, newFileName);
				// 内存数据读入磁盘
				try {
					multipartFile.transferTo(targetFile);
					mapMark.setIcon(url +newFileName);
				} catch (IOException e) {
					e.printStackTrace();
					return renderError("系统异常");
				}
			}
		boolean b = mapMarkService.updateById(mapMark);
		if (b) {
			this.OpLog("编辑标记", 0, getUserId());
			return renderSuccess("编辑成功！");
		} else {
			return renderError("编辑失败！");
		}
	}
	
	/**
	 * 设置标准图标
	 * @return
	 */
	@RequestMapping("/change")
	@ResponseBody
	public Object change(String url,int id){
	    String name = url.substring(url.lastIndexOf(".")+1);
		if(name.equals("mp4") || name.equals("flv") || name.equals("avi") || name.equals("rmvb") || name.equals("mpg") || name.equals("mpeg") || name.equals("wmv")
				|| name.equals("rm") || name.equals("mpe") || name.equals("mkv") || name.equals("vob")	
		){
			return renderError("这不是一张图片！");
		}
	     MapMark mapMark = mapMarkService.selectById(id);
		mapMark.setIcon(url);
		boolean b = mapMarkService.updateById(mapMark);
		if (b) {
			this.OpLog("设置地图标记图标", 0, getUserId());
			return renderSuccess("设置成功！");
		} else {
			return renderError("设置失败！");
		}
	}
	
	/**
	 * 界碑信息导出
	 * @param mapMark
	 * @param response
	 * @param request
	 */
	@RequestMapping("/exportmapMark")
	@ResponseBody
	public void exportmapMark(HttpServletResponse response,HttpServletRequest request){
		
		response.setCharacterEncoding("utf-8");
		
		String name = request.getParameter("name");
		String type = request.getParameter("type");
		
        Map<String, Object> condition = new HashMap<String, Object>();
        
        if (name!=null && name!="") {
			condition.put("name", name);
		}
		if (type!=null && type!="") {
			condition.put("type", Integer.parseInt(type));
		}
		List<MapMark> list = mapMarkService.selectExcle(condition);
		
		this.OpLog("界碑信息导出", 0, getUserId());
		String[] a= new String[]{"界碑名称","类型","经度","纬度","时间"};
        ExportExcel e = new ExportExcel("界碑信息", a,  list, response);
		try {
			e.exportmapMark();
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}
}
